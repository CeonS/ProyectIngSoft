package Vista;

import Controlador.DBPersona;
import Controlador.DBReunion;
import Controlador.DBServicio;
import Controlador.Parametros;
import Modelo.probarConexionDB;
import java.util.Date;
import java.sql.ResultSet;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.Properties;
import java.util.logging.Level;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.AddressException;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeMessage;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class RegistrarReuniones extends javax.swing.JFrame {

    public RegistrarReuniones() {
        initComponents();
        this.setLocationRelativeTo(null);
        panelTabla.setVisible(false);
        panelTablaEmpleado.setVisible(false);
        llenarServicios();

    }
    probarConexionDB pcDB = new probarConexionDB();
    DefaultTableModel modelo = new DefaultTableModel();
    DefaultTableModel modelo2 = new DefaultTableModel();

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        panelTabla = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabla = new javax.swing.JTable();
        panelTablaEmpleado = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tablaEmpleado = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        cbxServicio = new javax.swing.JComboBox<>();
        jLabel10 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        txtUbicacion = new javax.swing.JTextField();
        txtNumerocontacto = new javax.swing.JTextField();
        txtEmpleado = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        txtCliente = new javax.swing.JTextField();
        dataCFecha = new com.toedter.calendar.JDateChooser();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelTabla.setBackground(new java.awt.Color(204, 255, 204));

        tabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tabla.setPreferredSize(new java.awt.Dimension(300, 100));
        jScrollPane1.setViewportView(tabla);

        panelTabla.add(jScrollPane1);

        jPanel1.add(panelTabla, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, 530, 170));

        panelTablaEmpleado.setBackground(new java.awt.Color(204, 255, 204));

        tablaEmpleado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        tablaEmpleado.setPreferredSize(new java.awt.Dimension(300, 100));
        jScrollPane2.setViewportView(tablaEmpleado);

        panelTablaEmpleado.add(jScrollPane2);

        jPanel1.add(panelTablaEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(480, 240, 530, 170));

        jButton2.setFont(new java.awt.Font("Hack Nerd Font", 1, 12)); // NOI18N
        jButton2.setText("SALIR");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 520, -1, 30));

        btnRegistrar.setFont(new java.awt.Font("Hack Nerd Font", 0, 12)); // NOI18N
        btnRegistrar.setText("REGISTRAR");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });
        jPanel1.add(btnRegistrar, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 520, -1, 30));

        cbxServicio.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        jPanel1.add(cbxServicio, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 320, 160, 30));

        jLabel10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/blogging bw.png"))); // NOI18N
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 130, 510, 480));

        jLabel2.setFont(new java.awt.Font("Hack Nerd Font", 1, 22)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Empleado");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 280, -1, -1));

        jLabel5.setFont(new java.awt.Font("Hack Nerd Font", 1, 22)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("Número de contacto");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 400, -1, -1));

        jLabel3.setFont(new java.awt.Font("Hack Nerd Font", 1, 22)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Ubicación");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 360, -1, -1));

        jLabel4.setFont(new java.awt.Font("Hack Nerd Font", 1, 22)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Servicio");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 320, -1, -1));

        jLabel6.setFont(new java.awt.Font("Hack Nerd Font", 1, 36)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setText("REGISTRO DE REUNIONES");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 110, 490, 70));

        jLabel7.setFont(new java.awt.Font("Hack Nerd Font", 1, 22)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Fecha");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 440, -1, -1));
        jPanel1.add(txtUbicacion, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 360, 160, 30));
        jPanel1.add(txtNumerocontacto, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 400, 160, 30));

        txtEmpleado.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtEmpleadoFocusGained(evt);
            }
        });
        txtEmpleado.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtEmpleadoKeyReleased(evt);
            }
        });
        jPanel1.add(txtEmpleado, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 280, 160, 30));

        jLabel1.setFont(new java.awt.Font("Hack Nerd Font", 1, 22)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Cliente");
        jPanel1.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(60, 240, -1, -1));

        txtCliente.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtClienteFocusGained(evt);
            }
        });
        txtCliente.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtClienteActionPerformed(evt);
            }
        });
        txtCliente.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtClienteKeyReleased(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                txtClienteKeyTyped(evt);
            }
        });
        jPanel1.add(txtCliente, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 240, 160, 30));

        dataCFecha.setDateFormatString("yyyy-MM-dd");
        jPanel1.add(dataCFecha, new org.netbeans.lib.awtextra.AbsoluteConstraints(310, 440, 160, 30));

        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/6.jpg"))); // NOI18N
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(-20, 0, 1010, 620));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 610));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void txtClienteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtClienteActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtClienteActionPerformed

    public void mostrarTablaClientes() {
        String cliente = txtCliente.getText();

        String sql = "SELECT p.*,np.descripcionParametro, c.idCliente FROM persona p\n"
                + " inner join cliente c on p.idPersona = c.id_PersonaC\n"
                + " inner join nivelparametro np on c.id_ParametroTipo_Cliente = np.idParametro\n"
                + " where idCliente = '" + cliente + "';";

        try {
            String datosM[] = new String[6];
            Statement st2;
            st2 = pcDB.connection2().createStatement();
            ResultSet rs = st2.executeQuery(sql);
            if (rs.next()) {
                datosM[0] = rs.getString(11);
                datosM[1] = rs.getString(3);
                datosM[2] = rs.getString(4);
                datosM[3] = rs.getString(7);
                datosM[4] = rs.getString(9);
                datosM[5] = rs.getString(10);

                modelo.addRow(datosM);
            }

            tabla.setModel(modelo);
            pcDB.connection2().close();
            st2.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error de key: " + e);
        }
    }

    public void crearTablaCliente() {

        panelTabla.setVisible(false);
        modelo.addColumn("ID");
        modelo.addColumn("Nombres");
        modelo.addColumn("Apellidos");
        modelo.addColumn("DNI");
        modelo.addColumn("Estado");
        modelo.addColumn("Tipo Cliente");
        tabla.setModel(modelo);

    }

    public void crearTablaEmpleado() {
        panelTablaEmpleado.setVisible(false);
        modelo2.addColumn("ID");
        modelo2.addColumn("Nombres");
        modelo2.addColumn("Apellidos");
        modelo2.addColumn("DNI");
        tablaEmpleado.setModel(modelo2);

    }

    public void mostrarTablaEmpleados() {
        String empleado = txtEmpleado.getText();

        String sql = "SELECT p.* FROM persona p\n"
                + " inner join usuario u on p.idPersona = u.idPersonaUsuario\n"
                + " where idUsuario = '" + empleado + "' and u.idParametroUsuario = 2;";

        try {
            String datosM[] = new String[4];
            Statement st2;
            st2 = pcDB.connection2().createStatement();
            ResultSet rs = st2.executeQuery(sql);
            if (rs.next()) {
                datosM[0] = rs.getString(1);
                datosM[1] = rs.getString(3);
                datosM[2] = rs.getString(4);
                datosM[3] = rs.getString(7);

                modelo2.addRow(datosM);

            }

            tablaEmpleado.setModel(modelo2);
            pcDB.connection2().close();
            st2.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error de key: " + e);
        }
    }

    private void llenarServicios() {

        DBServicio s = new DBServicio();
        ArrayList<Parametros> listaServicios = s.getServicioses(pcDB.connection2());

        cbxServicio.removeAllItems();

        for (int i = 0; i < listaServicios.size(); i++) {
            cbxServicio.addItem(listaServicios.get(i).getDescripcionParametro());
        }
    }
    private void txtClienteKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClienteKeyTyped


    }//GEN-LAST:event_txtClienteKeyTyped

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        FormEmpleado fe = new FormEmpleado();
        fe.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void txtClienteKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtClienteKeyReleased
        crearTablaCliente();
        int columna = tabla.getColumnCount();
        int fila = tabla.getRowCount();
        String cliente = txtCliente.getText();
        if (cliente.equals("")) {
            panelTabla.setVisible(false);

            if (fila > 0) {
                modelo.removeRow(0);

            }
            if (columna > 6) {
                modelo.setColumnCount(0);
            }
        } else {
            if (columna == 6) {

                if (fila < 1) {
                    mostrarTablaClientes();
                    panelTabla.setVisible(true);
                }

            } else if (columna > 6) {
                if (fila > 0) {
                    modelo.removeRow(0);

                }
                if (columna > 6) {
                    modelo.setColumnCount(0);
                }
                crearTablaCliente();
                mostrarTablaClientes();
                panelTabla.setVisible(true);
            }

        }
    }//GEN-LAST:event_txtClienteKeyReleased

    private void txtEmpleadoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtEmpleadoKeyReleased
        crearTablaEmpleado();
        int columna = tablaEmpleado.getColumnCount();
        int fila = tablaEmpleado.getRowCount();
        String empleado = txtEmpleado.getText();
        if (empleado.equals("")) {
            panelTablaEmpleado.setVisible(false);

            if (fila > 0) {
                modelo2.removeRow(0);

            }
            if (columna > 4) {
                modelo2.setColumnCount(0);
            }

        } else {
            if (columna == 4) {

                if (fila < 1) {
                    mostrarTablaEmpleados();

                    panelTablaEmpleado.setVisible(true);
                }
            } else if (columna > 4) {
                if (fila > 0) {
                    modelo2.removeRow(0);

                }
                if (columna > 4) {
                    modelo2.setColumnCount(0);
                }
                crearTablaEmpleado();
                mostrarTablaEmpleados();
                panelTablaEmpleado.setVisible(true);
            }

        }
    }//GEN-LAST:event_txtEmpleadoKeyReleased

    private void txtEmpleadoFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtEmpleadoFocusGained
        panelTablaEmpleado.setVisible(false);
        panelTabla.setVisible(false);
        int columna = tablaEmpleado.getColumnCount();
        int fila = tablaEmpleado.getRowCount();
        String empleado = txtEmpleado.getText();
        if (columna == 4 && fila == 1) {
            panelTablaEmpleado.setVisible(true);
        } else if (empleado.equals("")) {

        } else {

            if (fila > 0) {
                modelo2.removeRow(0);
            }
            modelo2.setColumnCount(0);
            crearTablaEmpleado();
            mostrarTablaEmpleados();
            panelTablaEmpleado.setVisible(true);
        }
    }//GEN-LAST:event_txtEmpleadoFocusGained

    private void txtClienteFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtClienteFocusGained
        panelTabla.setVisible(false);
        panelTablaEmpleado.setVisible(false);
        int columna = tabla.getColumnCount();
        int fila = tabla.getRowCount();
        String cliente = txtCliente.getText();
        if (columna == 6 && fila == 1) {

            panelTabla.setVisible(true);
        } else if (cliente.equals("")) {

        } else {

            if (fila > 0) {
                modelo.removeRow(0);

            }
            modelo.setColumnCount(0);
            crearTablaCliente();
            mostrarTablaClientes();
            panelTabla.setVisible(true);

        }

    }//GEN-LAST:event_txtClienteFocusGained

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed

       int opcion = JOptionPane.showConfirmDialog(null, "¿Desea registrar los datos de reunión?", "Confirmar",JOptionPane.YES_NO_CANCEL_OPTION);
        if(opcion == 0){
        DBServicio s = new DBServicio();
        int cliente = Integer.parseInt(txtCliente.getText());
        int empleado = Integer.parseInt(txtEmpleado.getText());
        String servicio = cbxServicio.getSelectedItem().toString();
        int idServicio = s.ValidarServicio(pcDB.connection2(), servicio);
        String ubicacion = txtUbicacion.getText();
        String numContacto = txtNumerocontacto.getText();
        Date fechaN = dataCFecha.getDate();
        long d = fechaN.getTime();
        java.sql.Date fecha = new java.sql.Date(d);
        DBReunion r = new DBReunion();
        r.AgregarReunion(pcDB.connection2(), empleado, fecha, ubicacion, numContacto, idServicio, cliente);
        
        try{
        Properties props = new Properties();
        props.setProperty("mail.smtp.host", "smtp.gmail.com");
        props.setProperty("mail.smtp.starttls.enable", "true");
        props.setProperty("mail.smtp.port", "587");
        props.setProperty("mail.smtp.auth", "true");

        Session session = Session.getDefaultInstance(props);

        DBPersona p = new DBPersona();
        String correoRemitente = "ceon0508@gmail.com";
        String passwordRemitente = "oynzouhkkijdjfho";
        String correoReceptor = p.AsignarPersonaIdCliente(pcDB.connection2(), cliente);
        String asunto = "Datos Generales - Confirmación de reunión";

        String sqlQuery = "select ls.Usuario, ls.contraseña from login_usuario ls inner join Usuario u on ls.Usuario = u.Usuario\n"
                + "inner join persona p on u.idPersonaUsuario = p.idPersona\n"
                + "inner join cliente c on p.idPersona = c.id_PersonaC\n"
                + "where c.idCliente = "+cliente;
        int resultado = 0;
        String [] datos = new String [2];
        
         try {
            Statement st = pcDB.connection2().createStatement();
            ResultSet rs = st.executeQuery(sqlQuery);

            if (rs.next()) {
                resultado = 1;

                if (resultado == 1) {

                    datos[0] = rs.getString("ls.Usuario");
                    datos[1] = rs.getString("ls.Contraseña");

                
                }
            } else {
                JOptionPane.showMessageDialog(null, "Error de Acceso, Usuario No Registrado");
            }
            pcDB.connection2().close();
            st.close();
        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "Error de Registro " + e.getMessage());
        }
        
        String mensaje = "Se ha registrado una reunión a su nombre, si no está de acuerdo"
                + " inicie sesión y rechace la solicitud,en caso contrario,\n si está"
                + " de acuerdo con dicha reunión inicie sesión con los datos"
                + " adjuntados a este correo,\n posteriormente confirme la reunión "
                + " dentro de la aplicación de G2R Solutions y nos estaremos comuni"
                + "cando con usted.\n\n\n\n"
                + " Usuario: " + datos[0]+"\n"
                + " Contraseña:" + datos[1] +"";
        MimeMessage message =  new MimeMessage(session);
        message.setFrom(new InternetAddress(correoRemitente));
        message.addRecipient(Message.RecipientType.TO, new InternetAddress(correoReceptor));
        message.setSubject(asunto);
        message.setText(mensaje);
        JOptionPane.showMessageDialog(null, "Espere... Se realizará el envío del correo al cliente asociado");
        Transport t = session.getTransport("smtp");
        t.connect(correoRemitente,passwordRemitente);
        t.sendMessage(message, message.getRecipients(Message.RecipientType.TO));
        t.close();
         JOptionPane.showMessageDialog(null, "Se le envío un correo al Cliente asociado a la reunión");
        
        } catch (AddressException ex) {
            java.util.logging.Logger.getLogger(RegistrarReuniones.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            java.util.logging.Logger.getLogger(RegistrarReuniones.class.getName()).log(Level.SEVERE, null, ex);
        }
        }else{
            
        }
        
    }//GEN-LAST:event_btnRegistrarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(RegistrarReuniones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(RegistrarReuniones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(RegistrarReuniones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(RegistrarReuniones.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new RegistrarReuniones().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cbxServicio;
    private com.toedter.calendar.JDateChooser dataCFecha;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JPanel panelTabla;
    private javax.swing.JPanel panelTablaEmpleado;
    private javax.swing.JTable tabla;
    private javax.swing.JTable tablaEmpleado;
    private javax.swing.JTextField txtCliente;
    private javax.swing.JTextField txtEmpleado;
    private javax.swing.JTextField txtNumerocontacto;
    private javax.swing.JTextField txtUbicacion;
    // End of variables declaration//GEN-END:variables
}
